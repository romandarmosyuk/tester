=== PROJECT STRUCTURE ===
├── eslint.config.js
├── jest.config.ts
├── jest.preset.js
├── public
├── src
│   ├── app
│   │   ├── app.component.html
│   │   ├── app.component.less
│   │   ├── app.component.spec.ts
│   │   ├── app.component.ts
│   │   ├── app.config.ts
│   │   ├── app.routes.ts
│   │   ├── components
│   │   │   ├── dashboard
│   │   │   │   ├── dashboard.component.html
│   │   │   │   ├── dashboard.component.less
│   │   │   │   ├── dashboard.component.spec.ts
│   │   │   │   └── dashboard.component.ts
│   │   │   ├── layout
│   │   │   │   ├── layout.component.html
│   │   │   │   ├── layout.component.less
│   │   │   │   ├── layout.component.spec.ts
│   │   │   │   └── layout.component.ts
│   │   │   ├── login
│   │   │   │   ├── login.component.html
│   │   │   │   ├── login.component.less
│   │   │   │   ├── login.component.spec.ts
│   │   │   │   └── login.component.ts
│   │   │   ├── profile
│   │   │   │   ├── profile.component.html
│   │   │   │   ├── profile.component.less
│   │   │   │   ├── profile.component.spec.ts
│   │   │   │   └── profile.component.ts
│   │   │   ├── quiz
│   │   │   │   ├── quiz.component.html
│   │   │   │   ├── quiz.component.less
│   │   │   │   ├── quiz.component.spec.ts
│   │   │   │   └── quiz.component.ts
│   │   │   ├── register
│   │   │   │   ├── register.component.html
│   │   │   │   ├── register.component.less
│   │   │   │   ├── register.component.spec.ts
│   │   │   │   └── register.component.ts
│   │   │   └── review
│   │   │       ├── review.component.html
│   │   │       ├── review.component.less
│   │   │       ├── review.component.spec.ts
│   │   │       └── review.component.ts
│   │   ├── guards
│   │   │   └── auth
│   │   │       ├── auth.guard.spec.ts
│   │   │       └── auth.guard.ts
│   │   ├── models
│   │   │   └── models.ts
│   │   └── services
│   │       ├── auth
│   │       │   └── auth.service.ts
│   │       ├── backend
│   │       │   └── backend.service.ts
│   │       └── quiz
│   │           ├── quiz.service.spec.ts
│   │           └── quiz.service.ts
│   ├── environments
│   │   └── environment.ts
│   ├── index.html
│   ├── main.ts
│   ├── styles.less
│   └── test-setup.ts

=== FILE: eslint.config.js ===
const nx = require('@nx/eslint-plugin');

module.exports = [
  ...nx.configs['flat/base'],
  ...nx.configs['flat/typescript'],
  ...nx.configs['flat/javascript'],
  {
    ignores: ['**/dist'],
  },
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    // Override or add rules here
    rules: {},
  },
  ...nx.configs['flat/angular'],
  ...nx.configs['flat/angular-template'],
  {
    files: ['**/*.ts'],
    rules: {
      '@angular-eslint/directive-selector': [
        'error',
        {
          type: 'attribute',
          prefix: 'app',
          style: 'camelCase',
        },
      ],
      '@angular-eslint/component-selector': [
        'error',
        {
          type: 'element',
          prefix: 'app',
          style: 'kebab-case',
        },
      ],
    },
  },
  {
    files: ['**/*.html'],
    // Override or add rules here
    rules: {},
  },
];


=== FILE: jest.config.ts ===
export default {
  displayName: 'course-work',
  preset: './jest.preset.js',
  setupFilesAfterEnv: ['<rootDir>/src/test-setup.ts'],
  coverageDirectory: './coverage/course-work',
  transform: {
    '^.+\\.(ts|mjs|js|html)$': [
      'jest-preset-angular',
      {
        tsconfig: '<rootDir>/tsconfig.spec.json',
        stringifyContentPathRegex: '\\.(html|svg)$',
      },
    ],
  },
  transformIgnorePatterns: ['node_modules/(?!.*\\.mjs$)'],
  snapshotSerializers: [
    'jest-preset-angular/build/serializers/no-ng-attributes',
    'jest-preset-angular/build/serializers/ng-snapshot',
    'jest-preset-angular/build/serializers/html-comment',
  ],
  testMatch: [
    '<rootDir>/src/**/__tests__/**/*.[jt]s?(x)',
    '<rootDir>/src/**/*(*.)@(spec|test).[jt]s?(x)',
  ],
};


=== FILE: jest.preset.js ===
const nxPreset = require('@nx/jest/preset').default;

module.exports = { ...nxPreset };


=== FILE: src/app/app.component.html ===
<router-outlet></router-outlet>


=== FILE: src/app/app.component.less ===


=== FILE: src/app/app.component.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { RouterModule } from '@angular/router';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent, RouterModule.forRoot([])],
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome course-work'
    );
  });

  it(`should have as title 'course-work'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('course-work');
  });
});


=== FILE: src/app/app.component.ts ===
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';

@Component({
  standalone: true,
  imports: [RouterModule],
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.less',
})
export class AppComponent {
  title = 'course-work';
}


=== FILE: src/app/app.config.ts ===
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter, withHashLocation } from '@angular/router';
import { appRoutes } from './app.routes';

import { provideFirebaseApp, initializeApp } from '@angular/fire/app';
import { provideAuth, getAuth } from '@angular/fire/auth';
import { provideFirestore, getFirestore } from '@angular/fire/firestore';

import { environment } from 'src/environments/environment';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(appRoutes, withHashLocation()),
    provideFirebaseApp(() => initializeApp(environment.firebase)),
    provideAuth(() => getAuth()),
    provideFirestore(() => getFirestore()),
  ],
};


=== FILE: src/app/app.routes.ts ===
import { Routes } from '@angular/router';
import { LayoutComponent } from './components/layout/layout.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { QuizComponent } from './components/quiz/quiz.component';
import { ReviewComponent } from './components/review/review.component';
import { ProfileComponent } from './components/profile/profile.component';
import { authGuard } from './guards/auth/auth.guard';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';

export const appRoutes: Routes = [
  {
    path: '',
    component: LayoutComponent,
    children: [
      { path: 'dashboard', component: DashboardComponent },

      { path: 'quiz', component: QuizComponent },

      { path: 'quiz/:topicId', component: QuizComponent },

      { path: 'review/:attemptId', component: ReviewComponent },

      {
        path: 'profile',
        component: ProfileComponent,
        canActivate: [authGuard],
      },

      { path: 'login', component: LoginComponent },
      { path: 'register', component: RegisterComponent },

      { path: '', redirectTo: 'dashboard', pathMatch: 'full' },
      { path: '**', redirectTo: 'dashboard' },
    ],
  },
];


=== FILE: src/app/components/dashboard/dashboard.component.html ===
<aside class="info">
  <div class="card">
    <div class="card-img">
      <img class="test" src="/test.gif" alt="test" />
      <img class="test" src="/student.gif" alt="test" />
    </div>
    <span>проходи тест без регистрации</span>
  </div>
  <div class="card">
    <div class="card-img">
      <img class="study" src="/thinking.gif" alt="test" />
    </div>
    <span>хочешь анализ, теорию и задачи? Сначала войди в личный кабинет</span>
  </div>
  <div class="card">
    <div class="card-img">
      <img class="happy" src="/happy.gif" alt="test" />
    </div>
    <span>развивайся шаг за шагом и радуйся прогрессу! 🚀</span>
  </div>
</aside>
<div class="start">
  <button class="start-button" (click)="startQuiz()">
    Начать тестирование
  </button>
</div>


=== FILE: src/app/components/dashboard/dashboard.component.less ===
.info {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-width: 35%;

  .card {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    gap: 1rem;
    min-height: 20rem;
    background-color: #fff;
    border-radius: 16px;
    padding: 2rem;
  }

  .card-img {
    display: flex;
    gap: 2rem;
  }

  .test,
  .happy {
    width: 100px;
    height: auto;
  }

  .study {
    width: 200px;
    height: auto;
  }

  .card span {
    color: inherit;
    font-size: 1.8rem;
    font-weight: 400;
    line-height: 120%;
  }
}

.start {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  background-color: #fff;
  border-radius: 16px;
}

.start-button {
  display: flex;
  color: inherit;
  font-size: 2rem;
  font-weight: 400;
  line-height: 120%;
  display: flex;
  background-color: #e9e8e8d9;
  border-radius: 16px;
  padding: 1.5rem 5rem;
}

@media (max-width: 768px) {
  .info {
    .test,
    .happy {
      width: 50px;
      height: auto;
    }

    .study {
      width: 100px;
      height: auto;
    }
  }
}

@media (max-width: 480px) {
  .info {
    max-width: 100%;

    .test,
    .happy {
      width: 100px;
      height: auto;
    }

    .study {
      width: 200px;
      height: auto;
    }
  }

  .start {
    background-color: #e9e8e8d9;

    .start-button {
      background-color: #fff;
    }
  }
}


=== FILE: src/app/components/dashboard/dashboard.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { DashboardComponent } from './dashboard.component';

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DashboardComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/dashboard/dashboard.component.ts ===
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.less'],
})
export class DashboardComponent {
  constructor(private router: Router) {}

  startQuiz() {
    this.router.navigate(['/quiz']);
  }
}


=== FILE: src/app/components/layout/layout.component.html ===
<div class="wrapper">
  <header class="header">
    <a class="logo" routerLink="/dashboard">tester.</a>
    <div class="auth">
      <ng-container *ngIf="userId; else guest">
        <a class="link" routerLink="/profile">Личный кабинет</a>
      </ng-container>
      <ng-template #guest>
        <div class="link-wrapper" *ngIf="!isAuthPage()">
          <a class="link" routerLink="/login">Войти</a>
        </div>
      </ng-template>
    </div>
  </header>
  <main class="main">
    <router-outlet></router-outlet>
  </main>
</div>


=== FILE: src/app/components/layout/layout.component.less ===
.wrapper {
  max-width: 1500px;
  margin: 0 auto;
  padding: 1rem 2.5rem;
  height: 100%;
  height: 100vh;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;

  .logo {
    font-size: 8rem;
    font-style: italic;
    font-weight: 900;
    letter-spacing: -0.03em;
  }

  .auth {
    display: flex;
    align-items: center;
    gap: 1rem;

    .link {
      background-color: #fff;
      padding: 0.8rem 1.6rem;
      border-radius: 1rem;
      color: inherit;
      font-size: 1.75rem;
      font-weight: 400;
      line-height: 120%;
    }
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}


=== FILE: src/app/components/layout/layout.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { LayoutComponent } from './layout.component';

describe('LayoutComponent', () => {
  let component: LayoutComponent;
  let fixture: ComponentFixture<LayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LayoutComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(LayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/layout/layout.component.ts ===
import { Component, OnInit } from '@angular/core';
import { Router, RouterLink, RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Auth } from '@angular/fire/auth';
import { BackendService } from 'src/app/services/backend/backend.service';

@Component({
  selector: 'app-layout',
  standalone: true,
  imports: [CommonModule, RouterOutlet, RouterLink],
  templateUrl: './layout.component.html',
  styleUrls: ['./layout.component.less'],
})
export class LayoutComponent implements OnInit {
  username = '';
  email = '';
  userId: string | null = null;

  constructor(
    private auth: Auth,
    private backend: BackendService,
    private router: Router
  ) {}

  async ngOnInit() {
    this.auth.onAuthStateChanged(async (user) => {
      if (user) {
        this.userId = user.uid;
        this.email = user.email ?? '';
      } else {
        this.userId = null;
        this.email = '';
        this.username = '';
      }
    });
  }

  isAuthPage(): boolean {
    const url = this.router.url;
    return url.includes('/login') || url.includes('/register');
  }
}


=== FILE: src/app/components/login/login.component.html ===
<div class="login">
  <h2>Вход</h2>
  <form (ngSubmit)="loginEmail()">
    <div class="form-input">
      <label for="email">Email</label>
      <input
        [(ngModel)]="email"
        name="email"
        id="email"
        required
        type="email"
        autocomplete="username"
      />
    </div>

    <div class="form-input">
      <label for="password">Пароль</label>
      <input
        [(ngModel)]="password"
        name="password"
        id="password"
        required
        type="password"
        autocomplete="current-password"
      />
    </div>

    <button class="login-button" type="submit">Войти</button>
  </form>

  <span>Нет аккаунта?</span>

  <a (click)="goRegister()">Зарегистрироваться</a>
  <hr />
  <button class="login-button" (click)="close()">Закрыть</button>
</div>


=== FILE: src/app/components/login/login.component.less ===
.login {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  background-color: #fff;
  padding: 4rem;
  border-radius: 16px;

  h2 {
    margin-bottom: 2rem;
    font-size: 3.5rem;
  }

  .login-button {
    padding: 0.8rem 2.5rem;
    font-size: 1.6rem;
    border-radius: 16px;
  }

  form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;

    .form-input {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    input {
      font-size: 2rem;
    }
  }
  hr {
    width: 100%;
  }

  a {
    padding: 0.8rem 2.5rem;
    border: solid 2px #e9e8e8d9;
    border-radius: 16px;
  }
}


=== FILE: src/app/components/login/login.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LoginComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/login/login.component.ts ===
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { AuthService } from 'src/app/services/auth/auth.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.less'],
})
export class LoginComponent {
  email = '';
  password = '';

  constructor(private auth: AuthService, private router: Router) {}

  async loginEmail() {
    try {
      await this.auth.loginEmail(this.email, this.password);
      this.router.navigate(['/dashboard']);
    } catch (e) {
      alert('Ошибка входа: ' + (e as Error).message);
    }
  }

  goRegister() {
    this.router.navigate(['/register']);
  }

  close() {
    this.router.navigate(['/dashboard']);
  }
}


=== FILE: src/app/components/profile/profile.component.html ===
<h2>Личный кабинет</h2>

<div class="profile-info" *ngIf="userId; else guest">
  <p><strong>Email:</strong> {{ email }}</p>

  <button class="profile-button" (click)="logout()">Выйти</button>

  <h3>История попыток:</h3>
  <ul class="history">
    <li *ngFor="let a of attempts">
      <strong>Попытка от {{ formatDate(a.createdAt) }}</strong> — результат:
      {{ a.score }}/{{ a.total }}
      <button class="profile-button" (click)="viewAttempt(a.id)">
        Посмотреть
      </button>
    </li>
  </ul>
</div>

<ng-template #guest>
  <p>Вы не авторизованы. <a routerLink="/login">Войти</a></p>
</ng-template>


=== FILE: src/app/components/profile/profile.component.less ===
.profile-info {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 2rem;

  .username {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .profile-button {
    padding: 0.8rem 2rem;
    background-color: #fff;
    border-radius: 16px;
    font-size: 1.5rem;
  }
}

#editName {
  display: flex;
  align-items: center;
}

.history {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}


=== FILE: src/app/components/profile/profile.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ProfileComponent } from './profile.component';

describe('ProfileComponent', () => {
  let component: ProfileComponent;
  let fixture: ComponentFixture<ProfileComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ProfileComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(ProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/profile/profile.component.ts ===
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Auth, authState, User } from '@angular/fire/auth';
import { BackendService } from '../../services/backend/backend.service';
import { Attempt } from '../../models/models';

@Component({
  standalone: true,
  selector: 'app-profile',
  imports: [CommonModule, FormsModule],
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.less'],
})
export class ProfileComponent implements OnInit {
  attempts: Attempt[] = [];
  userId: string | null = null;
  email: string | null = null;

  constructor(
    private backend: BackendService,
    private router: Router,
    private auth: Auth
  ) {}

  ngOnInit() {
    authState(this.auth).subscribe(async (user: User | null) => {
      if (!user) {
        this.userId = null;
        this.email = null;
        return;
      }

      this.userId = user.uid;
      this.email = user.email;

      const list = await this.backend.getAttempts(this.userId);
      this.attempts = list.sort((a, b) => b.createdAt - a.createdAt);
    });
  }

  formatDate(timestamp: number): string {
    return new Date(timestamp).toLocaleString();
  }

  viewAttempt(id: string) {
    this.router.navigate(['/review', id]);
  }

  logout() {
    this.auth.signOut().then(() => this.router.navigate(['/']));
  }
}


=== FILE: src/app/components/quiz/quiz.component.html ===
<div class="quiz" *ngIf="!finished && current">
  <h3>{{ current.q.text }}</h3>

  <div *ngFor="let opt of current.q.options; let i = index">
    <label class="option">
      <input type="radio" name="answer" [(ngModel)]="chosen" [value]="i" />
      {{ opt }}
    </label>
  </div>

  <div class="buttons">
    <button class="quiz-button" (click)="answer()" [disabled]="chosen === null">
      Ответить
    </button>
    <button class="quiz-button" (click)="finishEarly()">Прервать тест</button>
  </div>
</div>

<div class="quiz" *ngIf="finished">
  <h3>Тест завершён</h3>
  <p>Правильных ответов: {{ score }} из {{ answers.length }}</p>

  <ng-template #guest>
    <p>
      Авторизация отсутствует... Увы, доступен только результат без сохранения.
    </p>
  </ng-template>

  <div class="buttons">
    <ng-container *ngIf="user$ | async as u; else guest">
      <button class="quiz-button" (click)="saveAndOpen(u.uid)">
        Сохранить и открыть обзор
      </button>
    </ng-container>

    <button class="quiz-button" (click)="finishEarly()">
      Выйти без сохранения
    </button>
  </div>
</div>


=== FILE: src/app/components/quiz/quiz.component.less ===
.quiz {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 2rem;
  background-color: #fff;
  border-radius: 16px;

  h3 {
    margin-bottom: 1rem;
    font-size: 2rem;
  }

  .option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.75rem;
  }

  .option,
  .option input {
    cursor: pointer;
  }

  .buttons {
    display: flex;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;
    margin-top: 1rem;

    .quiz-button {
      padding: 0.8rem 1.6rem;
      background-color: #e9e8e8d9;
      border-radius: 16px;
      font-size: 1.6rem;
    }
  }
}


=== FILE: src/app/components/quiz/quiz.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { QuizComponent } from './quiz.component';

describe('QuizComponent', () => {
  let component: QuizComponent;
  let fixture: ComponentFixture<QuizComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [QuizComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(QuizComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/quiz/quiz.component.ts ===
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { Auth, authState, User } from '@angular/fire/auth';
import { BackendService } from '../../services/backend/backend.service';
import { QuizService } from '../../services/quiz/quiz.service';
import { Question, AttemptAnswer, Attempt } from '../../models/models';
import { Observable } from 'rxjs';

@Component({
  standalone: true,
  selector: 'app-quiz',
  imports: [CommonModule, FormsModule],
  templateUrl: './quiz.component.html',
  styleUrls: ['./quiz.component.less'],
})
export class QuizComponent implements OnInit {
  user$: Observable<User | null>;

  current: { q: Question; isExtra: boolean } | null = null;
  chosen: number | null = null;

  answers: AttemptAnswer[] = [];
  score = 0;

  finished = false;
  savedAttemptId: string | null = null;

  constructor(
    private quiz: QuizService,
    private backend: BackendService,
    private router: Router,
    private auth: Auth
  ) {
    this.user$ = authState(this.auth);
  }

  async ngOnInit() {
    const all = await this.backend.getAllQuestions();
    this.quiz.bootstrap(all);
    this.next();
  }

  answer() {
    if (!this.current || this.chosen === null) return;

    const correct = this.quiz.handleAnswer(
      this.current.q,
      this.chosen,
      this.current.isExtra
    );

    if (!this.current.q.id) {
      throw new Error('У вопроса отсутствует id');
    }

    this.answers.push({
      questionId: this.current.q.id,
      chosen: this.chosen,
      correct,
      isExtra: this.current.isExtra,
    });

    if (correct) this.score++;
    this.chosen = null;

    this.next();
  }

  private next() {
    const n = this.quiz.getNext();
    if (!n) {
      this.finished = true;
      this.current = null;
      return;
    }
    this.current = n;
  }

  finishEarly() {
    this.router.navigate(['/dashboard']);
  }

  async saveAndOpen(userId: string) {
    const attempt: Omit<Attempt, 'id'> = {
      userId,
      answers: this.answers,
      createdAt: Date.now(),
      score: this.score,
      total: this.answers.length,
      weakTopics: Array.from(this.quiz.weakTopics),
    };

    this.savedAttemptId = await this.backend.saveAttempt(userId, attempt);
    this.router.navigate(['/review', this.savedAttemptId]);
  }
}


=== FILE: src/app/components/register/register.component.html ===
<div class="register">
  <h2>Регистрация</h2>
  <form (ngSubmit)="register()">
    <div class="register-form">
      <label for="email">Email</label>
      <input
        [(ngModel)]="email"
        name="email"
        id="email"
        required
        type="email"
        autocomplete="email"
      />
    </div>

    <div class="register-form">
      <label for="password">Пароль</label>
      <input
        [(ngModel)]="password"
        name="password"
        id="password"
        required
        type="password"
        autocomplete="new-password"
      />
    </div>

    <div class="register-form">
      <label for="password2">Повторите пароль</label>
      <input
        [(ngModel)]="password2"
        name="password2"
        id="password2"
        required
        type="password"
        autocomplete="new-password"
      />
    </div>

    <button class="register-button" type="submit">Зарегистрироваться</button>
  </form>

  <hr />
  <button class="register-button" (click)="close()">Закрыть</button>
</div>


=== FILE: src/app/components/register/register.component.less ===
.register {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  background-color: #fff;
  padding: 4rem;
  border-radius: 16px;

  h2 {
    margin-bottom: 2rem;
    font-size: 3.5rem;
  }

  .register-button {
    padding: 0.8rem 2.5rem;
    font-size: 1.6rem;
    border-radius: 16px;
  }

  form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;

    .register-form {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    input {
      font-size: 2rem;
    }
  }
  hr {
    width: 100%;
  }
}


=== FILE: src/app/components/register/register.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { RegisterComponent } from './register.component';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RegisterComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/register/register.component.ts ===
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth/auth.service';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.less'],
})
export class RegisterComponent {
  email = '';
  password = '';
  password2 = '';

  constructor(private auth: AuthService, private router: Router) {}

  async register() {
    if (this.password !== this.password2) {
      alert('Пароли не совпадают');
      return;
    }
    try {
      await this.auth.registerEmail(this.email, this.password);

      this.router.navigate(['/dashboard']);
    } catch (e) {
      alert('Ошибка регистрации: ' + (e as Error).message);
    }
  }

  close() {
    this.router.navigate(['/dashboard']);
  }
}


=== FILE: src/app/components/review/review.component.html ===
<div class="review" *ngIf="attempt">
  <h2>Обзор попытки</h2>
  <p>Результат: {{ attempt.score }} / {{ attempt.total }}</p>

  <div *ngFor="let ans of attempt.answers; let i = index">
    <div class="card" *ngIf="mapQ[ans.questionId] as q">
      <p>
        <strong>Вопрос {{ i + 1 }}:</strong> {{ q.text }}
      </p>
      <p>Ваш ответ: {{ q.options[ans.chosen] || '—' }}</p>
      <p>Правильный ответ: {{ q.options[q.correct] || '—' }}</p>
    </div>
  </div>

  <div class="study" *ngIf="attempt.weakTopics?.length">
    <h3>Рекомендуем подтянуть темы</h3>
    <div class="study-item" *ngFor="let t of attempt.weakTopics">
      <h4>{{ t }}</h4>

      <ng-container *ngIf="topicInfo[t] as info">
        <div *ngIf="info.theoryLink">
          <a class="theory" [href]="info.theoryLink" target="_blank"
            >Теория по теме</a
          >
        </div>

        <div class="study-task" *ngIf="info.task">
          <p><strong>Задача:</strong> {{ info.task }}</p>

          <button
            class="study-button"
            *ngIf="info.hint"
            (click)="toggleHint(t)"
          >
            {{ hintVisibleByTopic[t] ? 'Скрыть решение' : 'Показать решение' }}
          </button>

          <pre *ngIf="info.hint && hintVisibleByTopic[t]">{{ info.hint }}</pre>
        </div>
      </ng-container>
    </div>
  </div>

  <button class="review-button" (click)="toDashboard()">На главную</button>
</div>


=== FILE: src/app/components/review/review.component.less ===
.review {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  margin-bottom: 3rem;

  .card {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 2rem;
    background-color: #fff;
    border-radius: 16px;
  }

  .study {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    .study-item {
      display: flex;
      flex-direction: column;
      gap: 2rem;
      background-color: #fff;
      padding: 2rem;
      background-color: #fff;
      border-radius: 16px;

      .study-task {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
    }
  }

  .study-button {
    padding: 0.8rem 1.6rem;
    border-radius: 16px;
  }

  .review-button {
    align-self: center;
    padding: 0.8rem 1.6rem;
    border-radius: 16px;
    background-color: #fff;
    font-size: 1.5rem;
    font-weight: bold;
  }
}

.theory {
  padding: 0.8rem 1.6rem;
  border-radius: 16px;
  background-color: #e9e8e8d9;
}


=== FILE: src/app/components/review/review.component.spec.ts ===
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReviewComponent } from './review.component';

describe('ReviewComponent', () => {
  let component: ReviewComponent;
  let fixture: ComponentFixture<ReviewComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ReviewComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(ReviewComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== FILE: src/app/components/review/review.component.ts ===
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { BackendService } from '../../services/backend/backend.service';
import { Attempt, Question } from '../../models/models';

@Component({
  standalone: true,
  selector: 'app-review',
  imports: [CommonModule],
  templateUrl: './review.component.html',
  styleUrls: ['./review.component.less'],
})
export class ReviewComponent implements OnInit {
  attempt: Attempt | null = null;
  mapQ: Record<string, Question> = {};
  topicInfo: Record<
    string,
    { theoryLink?: string; task?: string; hint?: string }
  > = {};
  hintVisibleByTopic: Record<string, boolean> = {};

  constructor(
    private backend: BackendService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  async ngOnInit() {
    const id = this.route.snapshot.paramMap.get('attemptId');
    if (!id) return;

    const attempt = await this.backend.getAttemptById(id);
    if (!attempt) {
      alert('Попытка не найдена');
      this.router.navigate(['/dashboard']);
      return;
    }
    this.attempt = attempt;

    const all = await this.backend.getAllQuestions();
    this.mapQ = all.reduce((acc, q) => {
      if (q.id) {
        acc[q.id] = q;
      }
      return acc;
    }, {} as Record<string, Question>);

    (attempt.weakTopics ?? []).forEach((t) => {
      const first = all.find((q) => q.topic === t);
      if (first) {
        this.topicInfo[t] = {
          theoryLink: first.theoryLink,
          task: first.task,
          hint: first.hint,
        };
      } else {
        this.topicInfo[t] = {};
      }
    });
  }

  toggleHint(topic: string) {
    this.hintVisibleByTopic[topic] = !this.hintVisibleByTopic[topic];
  }

  toDashboard() {
    this.router.navigate(['/dashboard']);
  }
}


=== FILE: src/app/guards/auth/auth.guard.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { CanActivateFn } from '@angular/router';

import { authGuard } from './auth.guard';

describe('authGuard', () => {
  const executeGuard: CanActivateFn = (...guardParameters) => 
      TestBed.runInInjectionContext(() => authGuard(...guardParameters));

  beforeEach(() => {
    TestBed.configureTestingModule({});
  });

  it('should be created', () => {
    expect(executeGuard).toBeTruthy();
  });
});


=== FILE: src/app/guards/auth/auth.guard.ts ===
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth/auth.service';

export const authGuard: CanActivateFn = () => {
  const auth = inject(AuthService);
  const router = inject(Router);

  if (auth.isLoggedIn()) {
    return true;
  } else {
    router.navigate(['/dashboard']);
    return false;
  }
};


=== FILE: src/app/models/models.ts ===
export interface Question {
  id?: string;
  text: string;
  options: string[];
  correct: number;

  topic: string;
  theoryLink?: string;
  task?: string;
  hint?: string;
}

export interface AttemptAnswer {
  questionId: string;
  chosen: number;
  correct: boolean;
  isExtra: boolean;
}

export interface Attempt {
  id: string;
  userId: string;
  answers: AttemptAnswer[];
  createdAt: number;
  score: number;
  total: number;
  weakTopics: string[];
}


=== FILE: src/app/services/auth/auth.service.ts ===
import { Injectable } from '@angular/core';
import {
  Auth,
  signOut,
  User,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from '@angular/fire/auth';
import { BehaviorSubject } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private userSubject = new BehaviorSubject<User | null>(null);
  user$ = this.userSubject.asObservable();

  constructor(private auth: Auth) {
    this.auth.onAuthStateChanged((user) => this.userSubject.next(user));
  }

  async loginEmail(email: string, password: string) {
    return signInWithEmailAndPassword(this.auth, email, password);
  }

  async registerEmail(email: string, password: string) {
    return createUserWithEmailAndPassword(this.auth, email, password);
  }

  async logout() {
    await signOut(this.auth);
  }

  getUser() {
    return this.userSubject.value;
  }

  isLoggedIn() {
    return !!this.userSubject.value;
  }

  get currentUser() {
    return this.auth.currentUser;
  }
}


=== FILE: src/app/services/backend/backend.service.ts ===
import { Injectable } from '@angular/core';
import {
  Firestore,
  collection,
  getDocs,
  addDoc,
  doc,
  getDoc,
  query,
  where,
  DocumentData,
} from '@angular/fire/firestore';
import { Attempt, Question } from '../../models/models';

@Injectable({ providedIn: 'root' })
export class BackendService {
  constructor(private firestore: Firestore) {}

  private normalize(docData: DocumentData, id: string): Question {
    return {
      id,
      text: String(docData['text'] ?? ''),
      options: Array.isArray(docData['options'])
        ? (docData['options'] as string[])
        : [],
      correct: Number(docData['correct'] ?? 0),
      topic: String(docData['topic'] ?? ''),
      theoryLink: String(docData['theoryLink'] ?? ''),
      task: String(docData['task'] ?? ''),
      hint: String(docData['hint'] ?? ''),
    };
  }

  async getAllQuestions(): Promise<Question[]> {
    const snap = await getDocs(collection(this.firestore, 'questions'));
    return snap.docs.map((d) => this.normalize(d.data(), d.id));
  }

  async saveAttempt(
    userId: string,
    attempt: Omit<Attempt, 'id'>
  ): Promise<string> {
    const ref = await addDoc(collection(this.firestore, 'attempts'), {
      ...attempt,
      userId,
      createdAt: Date.now(),
    });
    return ref.id;
  }

  async getAttemptById(id: string): Promise<Attempt | null> {
    const ref = doc(this.firestore, 'attempts', id);
    const snap = await getDoc(ref);
    if (!snap.exists()) return null;
    const data = snap.data() as Omit<Attempt, 'id'>;
    return { id: snap.id, ...data };
  }

  async getAttempts(userId: string): Promise<Attempt[]> {
    const q = query(
      collection(this.firestore, 'attempts'),
      where('userId', '==', userId)
    );
    const snap = await getDocs(q);
    return snap.docs.map((d) => {
      const data = d.data() as Omit<Attempt, 'id'>;
      return { id: d.id, ...data };
    });
  }
}


=== FILE: src/app/services/quiz/quiz.service.spec.ts ===
import { TestBed } from '@angular/core/testing';

import { QuizService } from './quiz.service';

describe('QuizService', () => {
  let service: QuizService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(QuizService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


=== FILE: src/app/services/quiz/quiz.service.ts ===
import { Injectable } from '@angular/core';
import { Question } from '../../models/models';

type QWithFlag = { q: Question; isExtra: boolean };

@Injectable({ providedIn: 'root' })
export class QuizService {
  private baseQueue: Question[] = [];
  private baseIndex = 0;

  private extraPools = new Map<string, Question[]>();
  private pendingExtras: Question[] = [];
  private extrasActiveTopic: string | null = null;
  private extrasWrongCount = 0;

  private used: Set<string> = new Set();
  public weakTopics: Set<string> = new Set();

  bootstrap(questions: Question[]) {
    const byTopic = new Map<string, Question[]>();
    for (const q of questions) {
      const t = q.topic || '';
      if (!byTopic.has(t)) {
        byTopic.set(t, []);
      }
      const arr = byTopic.get(t);
      if (arr) {
        arr.push(q);
      }
    }

    const topics = Array.from(byTopic.keys()).sort((a, b) =>
      a.localeCompare(b)
    );

    this.baseQueue = [];
    this.extraPools.clear();
    for (const t of topics) {
      const arr = byTopic.get(t);
      if (!arr || arr.length === 0) continue;

      const [first, ...rest] = arr;
      this.baseQueue.push(first);
      this.extraPools.set(t, rest);
    }

    this.baseIndex = 0;
    this.pendingExtras = [];
    this.extrasActiveTopic = null;
    this.extrasWrongCount = 0;
    this.used.clear();
    this.weakTopics.clear();
  }

  getNext(): QWithFlag | null {
    if (this.pendingExtras.length > 0) {
      const q = this.pendingExtras.shift();
      if (!q) return null;
      if (q.id) this.used.add(q.id);
      return { q, isExtra: true };
    }

    if (this.baseIndex < this.baseQueue.length) {
      const q = this.baseQueue[this.baseIndex++];
      if (q.id) this.used.add(q.id);
      return { q, isExtra: false };
    }

    return null;
  }

  handleAnswer(q: Question, chosen: number, isExtra: boolean): boolean {
    const correct = q.correct === chosen;
    const topic = q.topic;

    if (isExtra) {
      if (!correct) this.extrasWrongCount++;

      if (this.pendingExtras.length === 0) {
        if (this.extrasActiveTopic && this.extrasWrongCount >= 1) {
          this.weakTopics.add(this.extrasActiveTopic);
        }
        this.extrasActiveTopic = null;
        this.extrasWrongCount = 0;
      }
      return correct;
    }

    if (!correct) {
      const pool = this.extraPools.get(topic) ?? [];

      const candidates = pool.filter((x) =>
        x.id ? !this.used.has(x.id) : true
      );
      const extras = candidates.slice(0, 2);

      if (extras.length > 0) {
        this.pendingExtras.push(...extras);
        this.extrasActiveTopic = topic;
        this.extrasWrongCount = 0;
      } else {
        this.weakTopics.add(topic);
      }
    }

    return correct;
  }
}


=== FILE: src/environments/environment.ts ===
export const environment = {
  production: false,
  firebase: {
    apiKey: 'AIzaSyApwiittngSJBLnqE1yk9UDeNKdR5u7Sdw',
    authDomain: 'my-course-work-d1021.firebaseapp.com',
    projectId: 'my-course-work-d1021',
    storageBucket: 'my-course-work-d1021.firebasestorage.app',
    messagingSenderId: '1034370525552',
    appId: '1:1034370525552:web:b3d9cb27231c79db3047b5',
  },
};


=== FILE: src/index.html ===
<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="utf-8" />
    <title>tester</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/logo.ico" />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>


=== FILE: src/main.ts ===
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig).catch((err) =>
  console.error(err)
);


=== FILE: src/styles.less ===
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  -webkit-tap-highlight-color: transparent;
}

html {
  font-size: 62.5%;
}

html,
body {
  height: 100%;
}

body {
  font-family: Inter, arial, sans-serif;
  font-size: 1.6rem;
  background-color: #e9e8e8d9;
}

a {
  text-decoration: none;
  color: inherit;
  cursor: pointer;
}

button {
  border: none;
  cursor: pointer;
}

app-layout {
  margin: 0 auto;
}

app-dashboard {
  display: flex;
  gap: 15px;
  width: 100%;
}

app-login,
app-register {
  display: flex;
  justify-content: center;
  align-items: center;
}

app-profile {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

@media (max-width: 768px) {
  html {
    font-size: 0.5rem;
  }
}

@media (max-width: 480px) {
  app-dashboard {
    flex-direction: column;
  }
}


=== FILE: src/test-setup.ts ===
// @ts-expect-error https://thymikee.github.io/jest-preset-angular/docs/getting-started/test-environment
globalThis.ngJest = {
  testEnvironmentOptions: {
    errorOnUnknownElements: true,
    errorOnUnknownProperties: true,
  },
};
import 'jest-preset-angular/setup-jest';


